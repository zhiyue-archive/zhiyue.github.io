<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Just Do IT.]]></title>
  <subtitle><![CDATA[恍惚中，时光停滞，岁月静好，宛如十年前。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://printf.me/"/>
  <updated>2014-07-30T04:22:10.695Z</updated>
  <id>http://printf.me/</id>
  
  <author>
    <name><![CDATA[zhiyue]]></name>
    <email><![CDATA[cszhiyue@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[]]></title>
    <link href="http://printf.me/2014/07/30/ffmpeg%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://printf.me/2014/07/30/ffmpeg的使用/</id>
    <published>2014-07-30T04:15:09.000Z</published>
    <updated>2014-07-30T04:22:04.000Z</updated>
    <content type="html"><![CDATA[<p>title: FFmpeg的使用<br>tags：[工具,音频,教程,音频开发]</p>
<h2 id="categories:_音频开发">categories:  音频开发</h2>
<p><img src="http://printf.qiniudn.com/20140616102021781.png" alt=""></p>
<p>最近因为要音频处理的研究,音频开发，但是有一个难题就是怎么解析与提取音频的数据,于是就找到了<code>FFmpeg</code>。基本上只要做视频音频开发都离不开<code>ffmpeg</code></p>
<h2 id="1-什么是ffmpeg">1.什么是ffmpeg</h2>
<p>引用<a href="http://zh.wikipedia.org/wiki/FFmpeg" target="_blank" rel="external">wiki百科</a>的解析.</p>
<blockquote>
<p>FFmpeg是一个自由软件，可以运行音频和视频多种格式的录影、转换、流功能<a href="http://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">^1</a>，包含了libavcodec ─这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。</p>
</blockquote>
<ul>
<li><code>ffmpeg</code>的官网地址是:<a href="https://www.ffmpeg.org/" target="_blank" rel="external">https://www.ffmpeg.org/</a></li>
<li><p><code>ffmpeg</code>的Github项目地址是:<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="external">https://github.com/FFmpeg/FFmpeg</a></p>
<h3 id="1-1_组件">1.1 组件</h3>
<p><code>FFmpeg</code>项目由以下几部分组成：</p>
</li>
<li><p><code>FFmpeg</code>视频文件转换命令行工具,也支持经过实时电视卡抓取和编码成视频文件；</p>
</li>
<li><code>ffserver</code>基于<code>HTTP</code>、<code>RTSP</code>用于实时广播的多媒体服务器.也支持时间平移；</li>
<li><code>ffplay</code>用 <code>SDL</code>和<code>FFmpeg</code>库开发的一个简单的媒体播放器；</li>
<li><code>libavcodec</code>一个包含了所有<code>FFmpeg</code>音视频编解码器的库。为了保证最优性能和高可复用性，大多数编解码器从头开发的；</li>
<li><code>libavformat</code>一个包含了所有的普通音视格式的解析器和产生器的库。<h3 id="1-2_谁在使用ffmpeg">1.2 谁在使用<code>ffmpeg</code></h3>
</li>
<li>使用FFMPEG作为内核视频播放器：<code>Mplayer</code>，<code>ffplay</code>，<code>射手播放器</code>，<code>暴风影音</code>，<code>KMPlayer</code>，<code>QQ影音</code>…</li>
<li>使用FFMPEG作为内核的Directshow Filter：<code>ffdshow</code>，<code>lav filters</code>…</li>
<li>使用FFMPEG作为内核的转码工具：<code>ffmpeg</code>，<code>格式工厂</code>…<h2 id="2-如何安装">2.如何安装</h2>
<code>FFmpeg</code>可以在Windows、Linux还有Mac OS等多种操作系统中进行安装和使用。</li>
</ul>
<p>这篇文章主要介绍其在Windows下面的安装：</p>
<ul>
<li>下载编译好的Windows版本：<a href="http://ffmpeg.zeranoe.com/builds/（与官网同步）" target="_blank" rel="external">http://ffmpeg.zeranoe.com/builds/（与官网同步）</a><br><img src="http://printf.qiniudn.com/20140730113852.png" alt=""></li>
<li>FFmpeg分为3个版本：<code>Static</code>、  <code>Shared</code>、 <code>Dev</code></li>
<li>前两个版本可以直接在命令行中使用。包含了三个<code>exe</code>:<code>ffmpeg.exe</code>，<code>ffplay.exe</code>，<code>ffprobe.exe</code></li>
<li><code>Static</code>版本中的<code>exe</code>体积较大,那是因为相关的<code>Dll</code>都已经编译进<code>exe</code>里面去了。</li>
<li><code>Shared</code>版本中<code>exe</code>的体积相对小很多,是因为它们运行的时候还需要到相关的dll中调用相应的功能</li>
<li><code>Dev</code>版本用于开发,里面包含了库文件<code>xxx.lib</code>以及头文件<code>xxx.h</code></li>
</ul>
<h2 id="3-怎么使用">3.怎么使用</h2>
<h3 id="3-1_命令行工具的使用">3.1 命令行工具的使用</h3>
<h4 id="3-11_ffmpeg-exe">3.11 <code>ffmpeg.exe</code></h4>
<p>用于转码的应用程序:</p>
<blockquote>
<p>一个简单的转码命令 将input.avi转码成output.ts，并设置视频的码率为640kbps</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -<span class="keyword">i</span> <span class="built_in">input</span>.avi -<span class="variable">b:v</span> <span class="number">640</span><span class="keyword">k</span> output.<span class="keyword">ts</span></div></pre></td></tr></table></figure>

<p>具体用法参考:   <a href="http://blog.csdn.net/leixiaohua1020/article/details/12751349" target="_blank" rel="external">ffmpeg参数中文详细解释</a><br>详细的使用说明（英文）：<a href="http://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">http://ffmpeg.org/ffmpeg.html</a></p>
<h4 id="3-12_ffplay-exe">3.12 <code>ffplay.exe</code></h4>
<p>主要用于播放的应用程序</p>
<blockquote>
<p>播放test.avi</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffplay <span class="keyword">test</span>.avi</div></pre></td></tr></table></figure>

<p>具体的使用方法可以参考：<a href="http://blog.csdn.net/leixiaohua1020/article/details/15186441" target="_blank" rel="external">ffplay的快捷键以及选项</a><br>详细的使用说明（英文）：<a href="http://ffmpeg.org/ffplay.html" target="_blank" rel="external">http://ffmpeg.org/ffplay.html</a></p>
<h4 id="3-13_ffprobe-exe">3.13 <code>ffprobe.exe</code></h4>
<p>ffprobe是用于查看文件格式的应用程序。<br>详细的使用说明（英文）：<a href="http://ffmpeg.org/ffprobe.html" target="_blank" rel="external">http://ffmpeg.org/ffprobe.html</a></p>
<h3 id="3-2_使用ffmpeg库进行开发">3.2 使用ffmpeg库进行开发</h3>
<h2 id="To_Be_Continue…"><strong>To Be Continue…</strong></h2>
<p><strong>参考资料</strong> :</p>
<ul>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977" target="_blank" rel="external">FFMPEG视音频编解码零基础学习方法</a></li>
<li><a href="http://yuanhuan.blog.51cto.com/3367116/1246370" target="_blank" rel="external">FFmpeg使用小记</a></li>
<li><a href="http://ffmpeg.org/documentation.html" target="_blank" rel="external">FFmpeg官方文档</a></li>
<li><a href="http://zh.wikihow.com/%E5%9C%A8Windows%E4%B8%8A%E5%AE%89%E8%A3%85FFmpeg%E7%A8%8B%E5%BA%8F" target="_blank" rel="external">如何在Windows上安装FFmpeg程序</a></li>
<li><a href="http://alleni123.iteye.com/blog/2028433" target="_blank" rel="external">ffmpeg教程 (一) 基本安装</a></li>
</ul>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[快速求幂算法]]></title>
    <link href="http://printf.me/2014/07/29/%E5%BF%AB%E9%80%9F%E6%B1%82%E5%B9%82%E7%AE%97%E6%B3%95/"/>
    <id>http://printf.me/2014/07/29/快速求幂算法/</id>
    <published>2014-07-29T08:07:51.000Z</published>
    <updated>2014-07-29T10:09:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-快速求幂算法">1.快速求幂算法</h2>
<p>在这篇文章我会展示怎样通过求一个数的幂的基本思路来引导我们发现一些抽象的东西比如半群和含幺半群。</p>
<p>有一个很有名的对一个数求幂的算法,也就是说,求一个数x的n次方或者这样简单表示：<code>x^n</code>。<a href="http://en.wikipedia.org/wiki/Donald_Knuth" target="_blank" rel="external">Donald Knuth</a>在<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html" target="_blank" rel="external">TAOCP</a>的<code>4.63节 求幂值</code>中提出这个算法。</p>
<p>这个算法很简单的实现就是x乘以自己n次，但是在这里当然会提供一种比这种方式更快的算法。正在谈论的算法通常被称作<code>二进制法(binary method)</code>、<code>梯度求幂(the powering ladder)</code>或者<code>反复平方法(repeated-squaring algorithm)</code></p>
<p>假设我们想计算<code>2^23</code>,在这里<code>x = 2</code>,<code>n = 23</code>，这个算法首先把23表示成<code>二进制</code>的形式<code>10111</code>.扫描这个<strong>二进制数(10111)</strong>每当遇到<code>0</code>或<code>1</code>,则相应的<code>求x的平方</code>或者<code>乘以x</code></p>
<p>这个方法有一个问题就是它扫描二进制表示的数是从左到右进行的,但是对于计算机通常以相反的方向能够更容易实现,因此<strong>Knuth</strong>提出一个替代的算法。</p>
<p>一个出自<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html" target="_blank" rel="external">TAOCP</a>的<code>4.63节</code>的<code>算法A</code>的简单实现如下:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">power1</span><span class="params">(<span class="variable">$x</span>, <span class="variable">$n</span>)</span> </span>{</div><div class="line">    <span class="variable">$y</span> = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">        <span class="variable">$t</span> = <span class="variable">$n</span> % <span class="number">2</span>;</div><div class="line">        <span class="variable">$n</span> = floor(<span class="variable">$n</span>/<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$t</span> == <span class="number">1</span>) {</div><div class="line">            <span class="variable">$y</span> = <span class="variable">$y</span> * <span class="variable">$x</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="variable">$x</span> = <span class="variable">$x</span> * <span class="variable">$x</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="variable">$y</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个函数需要两个整数,<code>$x</code>和<code>$n</code>然后返回<code>$x</code>的<code>$n</code>次幂作为结果。</p>
<p>首先创建一个辅助变量<code>$y</code>并且初始化为<code>1</code>,把它作为乘法的主体。</p>
<p>然后函数在每次循环迭代的时候扫描<code>$n</code>的二进制表示的数。如果遇到<code>1</code>则<code>$y</code>乘上<code>$x</code>,然后赋值回<code>$y</code>。每次循环都会计算<code>$x</code>的平方,并且把它赋值回<code>$x</code>。</p>
<p>遇到<code>1</code>意味着当前<code>$n</code>的值不能被<code>2</code>整除，换句话说就是，<code>$n % 2 == 1</code>。</p>
<p>同样的每次循环<code>$n</code>都会折半,然后向下取整得到结果。当<code>$n</code>等于<code>0</code>的时候,我们结束循环并且返回<code>$y</code>的值。</p>
<p>函数<code>power</code>能够这样被调用:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1024</span> == power1(<span class="number">2</span>, <span class="number">10</span>);</div><div class="line">=&gt; <span class="keyword">true</span></div></pre></td></tr></table></figure>

<p>我能想象你现在就像这个gif中的男孩。<br><img src="http://videlalvaro.github.io/images/csb.gif" alt=" gif"><br>尽管这个算法看起来像一个 “呵呵,真有意思” <strong>(无语了，你别说了，我根本不关心)</strong>的故事,实际上当它用来计算非常的大数时时十分高效的。例如有很多的素数测试算法都是依赖这个算法的不同变式。</p>
<h2 id="2-增加一些抽象">2.增加一些抽象</h2>
<p>到目前为止还没有什么意想不到的事情发生,但是如果我们注意到求一个数的幂实际上和一个数<code>自乘</code>多次是等价的,我们也可以看到乘法实际上等价于<code>自加</code>多次。举个例子<code>2 * 5</code>能够像这样被计算<code>2 + 2 + 2 + 2 + 2</code>。</p>
<p>我们能把这个算法转换成一种更普遍的形式使它能同样应用在乘法还有加法上吗?当然可以,我们仅仅需要改变几样东西。</p>
<p>在当前实现中,我们创建<code>$y</code>作为乘法的主体,并设置为<code>1</code>。如果我们想把算法用在加法上,我们需要把<code>$y</code>设置为<code>0</code>。因此我们仅需要改变函数的单位元素的值。</p>
<p>第二步要提供一个函数给我们的算法，它能够作乘法或者加法。为了实现这个目的我们会传递一个担当<code>二元运算</code>的函数。例如：一个需要两个参数的函数。这个函数需要遵循以下的规则。必须满足：<code>a·（ b · c ） = (a · b ) · c</code>。还要求返回结果的类型必须和两个输入参数的类型一致。  </p>
<p>幸运的是<code>加法</code>和<code>乘法</code>都满足<a href="http://zh.wikipedia.org/zh/%E7%BB%93%E5%90%88%E5%BE%8B" target="_blank" rel="external">结合律</a>,因此我们能够仅在一个函数中包含他们然后把它传递给我们的<code>power</code>算法。</p>
<p>这里是这个算法新的实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">power2</span><span class="params">(<span class="variable">$x</span>, <span class="variable">$n</span>, <span class="variable">$id</span>, <span class="variable">$f</span>)</span> </span>{</div><div class="line">    <span class="variable">$y</span> = <span class="variable">$id</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">        <span class="variable">$t</span> = <span class="variable">$n</span> % <span class="number">2</span>;</div><div class="line">        <span class="variable">$n</span> = floor(<span class="variable">$n</span>/<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$t</span> == <span class="number">1</span>) {</div><div class="line">            <span class="variable">$y</span> = <span class="variable">$f</span>(<span class="variable">$y</span>, <span class="variable">$x</span>);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">0</span>) {</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="variable">$x</span> = <span class="variable">$f</span>(<span class="variable">$x</span>, <span class="variable">$x</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="variable">$y</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们能够像这样调用它:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1024</span> == power2(<span class="number">2</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$a</span>, <span class="variable">$b</span>)</span> </span>{ <span class="keyword">return</span> <span class="variable">$a</span> * <span class="variable">$b</span>; });</div><div class="line">=&gt; <span class="keyword">true</span></div></pre></td></tr></table></figure>

<p>记住传递进我们算法的运算必须是可结合的,举个例子,减法不能被用在这里由于<code>10 - ( 5 - 3) = 8</code>但是<code>(10 - 5 ) - 3 = 2</code>。</p>
<h2 id="3-附加更抽象的概念">3.附加更抽象的概念</h2>
<p>从数学的角度说这个算法能够在任何满足结合律的代数结构中有效(在这个案例中就是整数的乘法和加法)，换言之，它能够用在<code>半群</code>中,引用一本关于<a href="http://zh.wikipedia.org/wiki/%E7%BE%A4%E8%AE%BA" target="_blank" rel="external">群论</a>的书。</p>
<blockquote>
<p>一个半群的集合S含有一个可结合的运算<code>·</code>；<br>也就是说,x • (y • z) = (x • y) • z 对于所有的x, y, z ∈ S都成立。</p>
</blockquote>
<p>同样，这个集合必须有一个<code>单位元素</code>使得它有一个<code>独异点</code>:</p>
<blockquote>
<p>一个独异点是一个集合M含有一个可结合运算·；伴有一个单位元素e∈ M满足e·x = x· e =  x对于所有x∈ M都成立。</p>
</blockquote>
<p>在这个预设条件下，有什么我们经常用在编程上的结构能使用这个算法的呢？如果你是一个web开发者，你不需要费大力气去获取strings。对于字符串（strings），使用<code>string append</code>作为二元操作而且<code>空字符串(empty string)</code>作为单位元素同样会带来类似的结果。如果一个字符串想重复<code>n</code>次,我们创建下面的函数:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span><span class="params">(<span class="variable">$s</span>, <span class="variable">$n</span>)</span> </span>{</div><div class="line">    <span class="keyword">return</span> power2(<span class="variable">$s</span>, <span class="variable">$n</span>, <span class="string">""</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$a</span>, <span class="variable">$b</span>)</span> </span>{</div><div class="line">               <span class="keyword">return</span> <span class="variable">$a</span> . <span class="variable">$b</span>;</div><div class="line">           });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>测试:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"aaaaaaaaaa"</span> == repeat(<span class="string">"a"</span>, <span class="number">10</span>);</div><div class="line">=&gt; <span class="keyword">true</span></div></pre></td></tr></table></figure>

<p>现在考虑一下<code>数组(arrays)</code>(或者其它语言称为<code>列表(lists)</code>)。我们想把一个数组复制n次。在这里空数组是单位元素，对PHP来说<code>array_merge</code>会用来作为二元操作。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat_el</span><span class="params">(<span class="variable">$el</span>, <span class="variable">$n</span>)</span> </span>{</div><div class="line">    <span class="keyword">return</span> power2(<span class="keyword">array</span>(<span class="variable">$el</span>), <span class="variable">$n</span>, <span class="keyword">array</span>(), <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$a</span>, <span class="variable">$b</span>)</span> </span>{</div><div class="line">            <span class="keyword">return</span> array_merge(<span class="variable">$a</span>, <span class="variable">$b</span>);</div><div class="line">           });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$arr</span> = repeat_el(<span class="string">"a"</span>, <span class="number">10</span>);</div><div class="line"><span class="number">10</span> == count(<span class="variable">$arr</span>);</div><div class="line">=&gt; <span class="keyword">true</span></div></pre></td></tr></table></figure>

<p>从上不难看出,像求一个数幂运算的这样简单事情给我们带来一个优雅的算法,它能被运用一些事情上,像重复的东西还有数组里的元素。</p>
<h2 id="4-延伸阅读">4.延伸阅读</h2>
<ul>
<li><p>这里的快速求幂算法是基于<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html" target="_blank" rel="external">TAOCP</a>中,<code>卷二</code>的<code>4.63节</code>。</p>
</li>
<li><p>所有的关于工作原理的解答都可以在<code>TAOCP</code>或者在这本书<a href="http://shoup.net/ntb/" target="_blank" rel="external">《A Computational Introduction to Number Theory and Algebra》</a>上找到,这本书的PDF版本在作者的主页上可以免费下载。浏览章节：<code>“Computing with large integers - The repeated squaring algorithm”</code></p>
</li>
<li><p>如果你想学习这个算法的一些用法或者想知道更多这个算法背后的理论,请查阅这本叫做<a href="http://www.amazon.com/Elements-Programming-Alexander-Stepanov/dp/032163537X" target="_blank" rel="external">《Elements of Programming》</a>的书。这本书非常了不起，它定义了不同类型的函数和使用类型系统确定函数是否是可结合的，二元的等等。作者是<code>C++STL</code>的设计者,所以这本书的内容可能会比较<code>理论化</code>,然后它能够直接应用在面向对象编程(OOP)。</p>
</li>
<li><p><code>半群</code> 和 <code>含幺半群</code>的引用来自于<a href="http://www.amazon.com/Handbook-Computational-Discrete-Mathematics-Applications/dp/1584883723/" target="_blank" rel="external">《Handbook of Computational Group Theory.》</a>。一本非常有趣的书，如果你对<code>计算群论</code>有兴趣的话。</p>
</li>
<li><p>如果你想学习更多有关<code>幺半群</code>还有它们的实现。<a href="http://learnyouahaskell.com/" target="_blank" rel="external">《Learn You a Haskell》</a>里的有个<code>章节</code>非常有趣的介绍它:<a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids#monoids" target="_blank" rel="external">Functors, Applicative Functors and Monoids</a></p>
</li>
<li><p>这是一个十分有趣的练习,通过实现这些概念使用PHP和OOP,对于不喜欢使用PHP无爱的人,也可以选择其它你喜欢的语言。</p>
<h2 id="5-你是想说Haskell?">5.你是想说Haskell?</h2>
<p>既然我已经提及一本<code>Haskell</code>的书,这里有一个Haskell实现的求幂算法,使用的递归算法来自于这本书<a href="http://www.amazon.com/Prime-Numbers-Computational-Richard-Crandall/dp/0387252827/" target="_blank" rel="external">《Prime Numbers: A Computational Perspective》</a></p>
</li>
</ul>
<figure class="highlight HASKELL"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">power</span> :: (<span class="type">Eq</span> a, <span class="type">Integral</span> b) =&gt; (a -&gt; a -&gt; a) -&gt; a -&gt; b -&gt; a</div><div class="line"><span class="title">power</span> f a n</div><div class="line">  | n == <span class="number">1</span> = a</div><div class="line">  | even n = square a (n `div` <span class="number">2</span>)</div><div class="line">  | otherwise = f a (square a ((n-<span class="number">1</span>) `div` <span class="number">2</span>))</div><div class="line">  <span class="keyword">where</span></div><div class="line">    square a' n' = f (power f a' n') (power f a' n')</div></pre></td></tr></table></figure>

<p>几个函数调用的结果：</p>
<figure class="highlight Haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">*<span class="type">Main</span>&gt; :load pow.hs</div><div class="line">[<span class="number">1</span> <span class="keyword">of</span> <span class="number">1</span>] <span class="type">Compiling</span> <span class="type">Main</span>             ( pow.hs, interpreted )</div><div class="line"><span class="type">Ok</span>, modules loaded: <span class="type">Main</span>.</div><div class="line">*<span class="type">Main</span>&gt; power (*) <span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="number">1024</span></div><div class="line">*<span class="type">Main</span>&gt; power (+) <span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="number">20</span></div><div class="line">*<span class="type">Main</span>&gt; power (++) <span class="string">"a"</span> <span class="number">10</span></div><div class="line"><span class="string">"aaaaaaaaaa"</span></div></pre></td></tr></table></figure>

<p>正如你所看到的,这个函数调用一个function<code>(a-&gt;a-&gt;a)</code>,例子中,对于<code>integers</code>使用<code>*</code>或者<code>+</code>,对于<code>lists</code>使用<code>++</code>。</p>
<p>我希望你会觉得这边文章有趣或者激起你学习与编程有关的数学的欲望。因为我认为我们掌握得越多数学方面的知识，我们就能更好的使用抽象的东西。</p>
]]></content>
    
    
      <category term="算法" scheme="http://printf.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="翻译" scheme="http://printf.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://printf.me/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo 多标签]]></title>
    <link href="http://printf.me/2014/06/09/hexo-%E5%A4%9A%E6%A0%87%E7%AD%BE/"/>
    <id>http://printf.me/2014/06/09/hexo-多标签/</id>
    <published>2014-06-09T08:21:56.000Z</published>
    <updated>2014-06-09T08:28:11.000Z</updated>
    <content type="html"><![CDATA[<p>刚开始使用hexo记录一下使用过程遇到的问题.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用多标签要在括号内<span class="keyword">*</span><span class="keyword">*</span>[,]<span class="keyword">*</span><span class="keyword">*</span></div><div class="line"></div><div class="line">在括号内用逗号分隔开.</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="标签" scheme="http://printf.me/tags/%E6%A0%87%E7%AD%BE/"/>
    
      <category term="hexo" scheme="http://printf.me/tags/hexo/"/>
    
      <category term="备忘" scheme="http://printf.me/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="hexo" scheme="http://printf.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://printf.me/2014/05/21/hello-world/"/>
    <id>http://printf.me/2014/05/21/hello-world/</id>
    <published>2014-05-21T08:15:59.000Z</published>
    <updated>2014-05-22T08:51:01.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    
      <category term="教程" scheme="http://printf.me/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="杂货" scheme="http://printf.me/categories/%E6%9D%82%E8%B4%A7/"/>
    
  </entry>
  
</feed>
